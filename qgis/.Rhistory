if(packageVersion("ggplot2") > "2.2") {
spd.binned = with(data, factor(spd.binned, levels = rev(levels(spd.binned))))
spd.colors = rev(spd.colors)
}
data$spd.binned =factor(data$spd.binned, levels = rev(levels(data$spd.binned)))
data$spd.colors = rev(data$spd.colors)
plot(data)
data$spd.binned =factor(data$spd.binned, levels = rev(levels(data$spd.binned)))
data$spd.colors = rev(data$spd.colors)
plot(data)
data$spd.colors
str(data)
if(packageVersion("ggplot2") > "2.2") {
data$spd_binned =factor(data$spd_binned, levels = rev(levels(data$spd_binned)))
data$spd_colors = rev(data$spd_colors)
}
plot(data)
data$spd_binned =factor(data$spd_binned, levels = rev(levels(data$spd_binned)))
plot(data)
data$spd_binned
data$spd_binned
data
wind_rose
data=wind_rose
plot(data)
data
str(data)
data$data$spd_binned
data$data$spd_binned =factor(data$data$spd_binned, levels = rev(levels(data$data$spd_binned)))
data$spd_colors = rev(data$spd_colors)
plot(data)
p_windrose <- ggplot(data = na.omit(data$data),
aes(x = dir_binned,
fill = spd_binned)) +
geom_bar() +
#    geom_bar(aes(y = border, width = 1), position = "stack",
#             stat = "identity", fill = NA, colour = "white") +
scale_x_discrete(drop = FALSE,
labels = c("N","NE", "E",
"SE","S","SW","W",
"NW")) +
coord_polar(start = -((data$dirres/2)/360) * 2*pi) +
scale_fill_manual(name = paste(as.character(t_legend)),
values = data$spd_colors,
drop = FALSE)+
scale_y_continuous(labels = scales::percent) +
ylab("Frequency")
p_windrose
_windrose <- ggplot(data = na.omit(data$data),
aes(x = dir_binned,
fill = spd_binned)) +
geom_bar() +
#    geom_bar(aes(y = border, width = 1), position = "stack",
#             stat = "identity", fill = NA, colour = "white") +
scale_x_discrete(drop = FALSE,
labels = c("N","NE", "E",
"SE","S","SW","W",
"NW")) +
coord_polar(start = -((data$dirres/2)/360) * 2*pi) +
scale_fill_manual(name = paste(as.character(t_legend)),
values = data$spd_colors,
drop = FALSE)+
scale_y_continuous(labels = percent) +
ylab("Frequency")
_windrose <- ggplot(data = na.omit(data$data),
aes(x = dir_binned,
fill = data$spd_binned)) +
geom_bar() +
#    geom_bar(aes(y = border, width = 1), position = "stack",
#             stat = "identity", fill = NA, colour = "white") +
scale_x_discrete(drop = FALSE,
labels = c("N","NE", "E",
"SE","S","SW","W",
"NW")) +
coord_polar(start = -((data$dirres/2)/360) * 2*pi) +
scale_fill_manual(name = paste(as.character(t_legend)),
values = data$spd_colors,
drop = FALSE)+
scale_y_continuous(labels = percent) +
ylab("Frequency")
p_windrose <- p_windrose +
theme(axis.title = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
p_windrose
data$dirres
( data$dirres != 22.5 || data$dirres != 45 )
( (data$dirres != 22.5) | (data$dirres != 45) )
( (data$dirres ! 22.5) | (data$dirres != 45) )
( (data$dirres != 45) )
( (data$dirres != 45) || data$dirres !=22.5))
(data$dirres != 45) || data$dirres !=22.5)
(data$dirres != 45) || (data$dirres !=22.5)
(data$dirres != 45) | (data$dirres != 22.5)
(data$dirres != 45) or (data$dirres != 22.5)
(data$dirres != 45) & (data$dirres != 22.5)
data$dirres
data$dirres != 45
data$dirres != 45
data$dirres != 22
data$dirres=33
(data$dirres != 45) & (data$dirres != 22.5)
data$dirres != 22.5 & data$dirres != 45
data$dirres=22
data$dirres=22.5
data$dirres != 22.5 & data$dirres != 45
data$dirres != 22.5 & data$dirres != 45
data$dirres=45
data$dirres != 22.5 & data$dirres != 45
p_windrose <- ggplot(data = na.omit(data$data),
aes(x = dir_binned,
fill = spd_binned,
y = (..count..)/sum(..count..))) +
geom_bar() +
#    geom_bar(aes(y = border, width = 1), position = "stack",
#             stat = "identity", fill = NA, colour = "white") +
scale_x_discrete(drop = FALSE,
labels =  waiver()) +
coord_polar(start = -((data$dirres/2)/360) * 2*pi) +
scale_fill_manual(name = paste(as.character(t_legend)),
values = data$spd_colors,
drop = FALSE)+
scale_y_continuous(labels = scales::percent) +
ylab("Frequency")
p_windrose
data
data=wind_rose
if(!is.null(palette)) {
n_spd_seq <- length(data$spd_colors)
if ("gray50" %in% data$spd_colors) {
n_spd_seq <- n_spd_seq - 1
add_gray <- TRUE
} else
add_gray <- FALSE
n_colors_in_range <- n_spd_seq
##########################################
# create the color map
spd_colors <- colorRampPalette(brewer.pal(min(max(3,
n_colors_in_range),
min(9,
n_colors_in_range)),
palette))(n_colors_in_range)
if(packageVersion("ggplot2") > "2.2") {
data$data$spd_binned =factor(data$data$spd_binned, levels = rev(levels(data$data$spd_binned)))
data$spd_colors = rev(data$spd_colors)
}
if(plot_theme == "theme_grey") plot_theme <- "theme_gray"
if(is.null(plot_theme)) plot_theme <- "theme_minimal"
if(!is.null(palette)) {
n_spd_seq <- length(data$spd_colors)}
if ("gray50" %in% data$spd_colors) {
n_spd_seq <- n_spd_seq - 1
add_gray <- TRUE
} else
{ add_gray <- FALSE
n_colors_in_range <- n_spd_seq
}
if(plot_theme == "theme_grey") plot_theme <- "theme_gray"
if(is.null(plot_theme)) plot_theme <- "theme_minimal"
if(!is.null(palette)) {
n_spd_seq <- length(data$spd_colors)
if ("gray50" %in% data$spd_colors) {
n_spd_seq <- n_spd_seq - 1
add_gray <- TRUE
} else
{ add_gray <- FALSE
n_colors_in_range <- n_spd_seq
}
}
basis=ggplot(data = na.omit(data$data),
aes(x = dir_binned,
fill = spd_binned,
y = (..count..)/sum(..count..)
)
)
p_windrose <- basis +
geom_bar(aes(y = border, width = 1)) +
scale_x_discrete(drop = FALSE,
labels = label_x) +
coord_polar(start = -((data$dirres/2)/360) * 2*pi) +
scale_fill_manual(name = paste(as.character(t_legend)),
values = data$spd_colors,
drop = FALSE)
if ( data$dirres == 45)    { label_x=c("N","NE", "E","SE","S","SW","W","NW") }
if ( data$dirres == 22.5)  { label_x=c("N","NNE","NE","ENE", "E","ESE", "SE","SSE",
"S","SSW", "SW","WSW", "W","WNW","NW","NNW")}
p_windrose <- basis +
geom_bar(aes(y = border, width = 1)) +
scale_x_discrete(drop = FALSE,
labels = label_x) +
coord_polar(start = -((data$dirres/2)/360) * 2*pi) +
scale_fill_manual(name = paste(as.character(t_legend)),
values = data$spd_colors,
drop = FALSE)
p_windrose
p_windrose <- basis +
geom_bar() +
scale_x_discrete(drop = FALSE,
labels = label_x) +
coord_polar(start = -((data$dirres/2)/360) * 2*pi) +
scale_fill_manual(name = paste(as.character(t_legend)),
values = data$spd_colors,
drop = FALSE)
p_windrose
if(packageVersion("ggplot2") > "2.2") {
data$data$spd_binned =factor(data$data$spd_binned, levels = rev(levels(data$data$spd_binned)))
data$spd_colors = rev(data$spd_colors)
}
basis=ggplot(data = na.omit(data$data),
aes(x = dir_binned,
fill = spd_binned)
)
p_windrose <- basis +
geom_bar() +
scale_x_discrete(drop = FALSE,
labels = label_x) +
coord_polar(start = -((data$dirres/2)/360) * 2*pi) +
scale_fill_manual(name = paste(as.character(t_legend)),
values = data$spd_colors,
drop = FALSE)
p_windrose
if (frequency_relative==T) {
p_windrose <- p_windrose +scale_y_continuous(labels = scales::percent) + ylab("Relative Frequency")
}
frequency_relative=T
if (frequency_relative==T) {
p_windrose <- p_windrose +scale_y_continuous(labels = scales::percent) + ylab("Relative Frequency")
}
p_windrose
p_windrose + ggthemes::theme_excel()
install.packages("ggthemes")
p_windrose + ggthemes::theme_excel()
p_windrose + ggthemes::theme_tufte()
p_windrose <- p_windrose +
theme(axis.title = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
p_windrose
p_windrose +scale_y_continuous(labels =  function(x){ paste0(x, "%")) + ylab("Relative Frequency")+xlab("Sectors")
p_windrose +scale_y_continuous(labels =  function(x){ paste0(x, "%")}) + ylab("Relative Frequency")+xlab("Sectors")
p_windrose <- basis +
geom_bar() +
scale_x_discrete(drop = FALSE,
labels = label_x) +
coord_polar(start = -((data$dirres/2)/360) * 2*pi) +
scale_fill_manual(name = paste(as.character(t_legend)),
values = data$spd_colors,
drop = FALSE)
p_windrose +scale_y_continuous(labels =  function(x){ paste0(x, "%")) + ylab("Relative Frequency")+xlab("Sectors")
p_windrose +scale_y_continuous(labels =  function(x){ paste0(x, "%")}) + ylab("Relative Frequency")+xlab("Sectors")
devtools::install_github("alfcrisci/windrose")
?grobTree
??grobTree
install.packages(googlesheets)
library(googlesheets)
install.packages("googlesheets")
library(googlesheets)
install.packages("googlesheets")
gs_auth(new_user = TRUE)
library(googlesheets)
gs_auth(new_user = TRUE)
gs_ls()
setwd("/home/alf/alf_github/UNIFI_PRIN_raster_data/ISPRA_CS")
dir()
diff_CS=raster("ISPRA_CS_2015.tif")-raster("ISPRA_CS_2012.tif")
library(raster)
setwd("/home/alf/alf_github/UNIFI_PRIN_raster_data/ISPRA_CS")
diff_CS=raster("ISPRA_CS_2015.tif")-raster("ISPRA_CS_2012.tif")
hist(diff_CS)
v=getValues(diff_CS)
hist(v)
which(v==1)
plot(diff_CS)
writeRaster(diff_CS,"ISPRA_CS_diff_2015_2012.tif")
diff_CS=raster("ISPRA_CS_2016.tif")-raster("ISPRA_CS_2015.tif")
plot(diff_CS)
v=getValues(diff_CS)
which(v==1)
writeRaster(diff_CS,"ISPRA_CS_diff_2016_2015.tif")
setwd("/home/alf/alf_github/UNIFI_PRIN_raster_data/ISPRA_CS")
diff_CS=raster("ISPRA_CS_2015.tif")-raster("ISPRA_CS_2012.tif")
writeRaster(diff_CS,"ISPRA_CS_diff_2015_2012.tif")
diff_CS=raster("ISPRA_CS_2016.tif")-raster("ISPRA_CS_2015.tif")
writeRaster(diff_CS,"ISPRA_CS_diff_2016_2015.tif")
library("windrose", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
remove.packages("windrose", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("alfcrisci/rWindrose")
devtools::install_github("alfcrisci/rWindrose")
devtools::install_github("alfcrisci/rWindrose")
devtools::install_github("alfcrisci/rWindrose")
devtools::install_github("alfcrisci/rWindrose")
library(RNCEP)
install.packages("RNCEP")
library(RNCEP)
weightedMedian_raster=function(x,w) {  med_temp=c(x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9]);
res=NA;
if ( !is.na(x[1]))
{return(weightedMedian(med_temp,w)} else {return(res)}
};
?calc
??calc
?raster::calc
library(matrixStats)
weightedMean(sample(9))
weightedMedian(rep(2,9),)
rep(2,9)
sample(9)
weightedMedian(rep(2,9),sample(9))
weightedMean(rep(2,9),sample(9))
weighted.mean()
?weighted.mean
weighted.mean(rep(2,9),sample(9))
rnorm(0,1)
?rnorm
rnorm(10,0,1)
sd(rnorm(10,0,1))
c(rnorm(10,0,1),rnorm(10,0,2))
sd(c(rnorm(10,0,1),rnorm(10,0,2)))
2+1
3/1.32
sqrt(5)
var(c(rnorm(10,0,1),rnorm(10,0,2)))
sqrt(var(c(rnorm(10,0,1),rnorm(10,0,2))))
var(c(rnorm(10,0,1)
)
)
var(c(rnorm(10,0,2)))
sd(c(rnorm(10,0,2)))
var(c(rnorm(10,0,2)))
sqrt(var(c(rnorm(10,0,2))))
sqrt((var(c(rnorm(10,0,2)))+(var(c(rnorm(10,0,1))))
)
)
sqrt((var(c(rnorm(10,0,2)))+(var(c(rnorm(10,0,1)))/2)
)
)
sqrt((0.5*var(c(rnorm(10,0,2)))+ 0.5*var(c(rnorm(10,0,1)))))
sd(c(rnorm(10,0,2),rnorm(10,0,1)))
sd(c(rnorm(10,2,2),rnorm(10,2,1)))
sqrt((0.5*var(c(rnorm(10,2,2)))+ 0.5*var(c(rnorm(10,2,1)))))
sqrt((0.5*var(c(rnorm(1000,2,2)))+ 0.5*var(c(rnorm(1000,2,1)))))
sd(c(rnorm(1000,2,2),rnorm(1000,2,1)))
sqrt((0.5*(sd(c(rnorm(1000,2,2)))^2)+ 0.5 * sd(c(rnorm(1000,2,1)))^2))
sqrt((0.5*var(c(rnorm(1000,2,2)))+ 0.5*var(c(rnorm(1000,2,1)))))
library(raster)
data("volcano")
volcano
f <- system.file("external/test.grd", package="raster")
f
r <- raster(f)
r
r^2
r^0.5
sqrt(r)
devtools::install_github(c("yihui/servr", "hafen/rmote"))
library(raster)
library(ncdf4)
all_wt=c("/home/alf/Documenti/aa_recent_work/lav_messeri/eobs_data/all_wt/")
stats_eobs_wt=c("/home/alf/Documenti/aa_recent_work/lav_messeri/eobs_data/stats_eobs_monthly/")
files_all=list.files(path=all_wt,pattern ="nc",full.names = T)
files_clim=list.files(path=stats_eobs_wt,pattern ="rds",full.names = T)
res_wt=list()
jj=1
wt_stack=lapply(grep(paste0(".*rr.*_",jj,"_"),files_all,value=T),stack)
clim=readRDS(grep(paste0(".*rr.*_",jj,".nc"),files_clim,value=T))
lay=clim[[1]]*NA
template=stack(lay,lay,lay,lay,lay,lay,lay,lay,lay)
template
template=stack(lay,lay,lay,lay,lay,lay,lay,lay,lay)
names(template)=c("pwt1", "pwt2","pwt3","pwt4","pwt5","pwt6","pwt7","pwt8","pwt9")
saveRDS(template,"/home/alf/Documenti/aa_recent_work/lav_messeri/eobs_data/template_wt9.rds")
template=readRDS("/home/alf/Documenti/aa_recent_work/lav_messeri/eobs_data/template_wt9.rds")
j=which(!is.na(getValues(clim[[1]])))
res=list()
for ( z in seq_along(j)) {
res[[z]]=length(which(wt_stack[[1]][j[z]]>clim[[3]][j[1]]))/length(wt_stack[[1]][j[z]])
}
z
as.data.frame(wt_stack[j])
b=as.data.frame(wt_stack)
b=as.data.frame(wt_stack[[1]][j])
str(b)
head(b)
j
clim_temp=as.data.frame(clim[j])
nrow(clim_temp)
aa=sapply(1:nrow(clim_temp),FUN=function(x) length(which(stack_temp[x,]>clim_temp[x,3])))
stack_temp=as.data.frame(wt_stack[[1]][j])
clim_temp=as.data.frame(clim[j])
aa=sapply(1:nrow(clim_temp),FUN=function(x) length(which(stack_temp[x,]>clim_temp[x,3])))
x=1
length(which(stack_temp[x,]>clim_temp[x,3])
)
ncol(stack_temp)
aa=sapply(1:100,FUN=function(x) length(which(stack_temp[x,]>clim_temp[x,3]))/ncol_stack)
ncol_stack=ncol(stack_temp)
aa=sapply(1:100,FUN=function(x) length(which(stack_temp[x,]>clim_temp[x,3]))/ncol_stack)
aa
nrow_stack=as.integer(nrow(stack_temp))
aa=sapply(1:nrow_stack,FUN=function(x) length(which(stack_temp[x,]>clim_temp[x,3]))/ncol_stack)
clim
all_wt=c("/home/alf/Documenti/aa_recent_work/lav_messeri/eobs_data/all_wt/")
stats_eobs_wt=c("/home/alf/Documenti/aa_recent_work/lav_messeri/eobs_data/stats_eobs_monthly/")
files_all=list.files(path=all_wt,pattern ="nc",full.names = T)
files_clim=list.files(path=stats_eobs_wt,pattern ="rds",full.names = T)
files_all
aa
aa33=sapply(1:nrow_stack,FUN=function(x) length(which(stack_temp[x,]>clim_temp[x,3]))/ncol_stack)
aa33=sapply(1:nrow_stack,FUN=function(x) length(which(stack_temp[x,]>clim_temp[x,3])))
var="rr"
mese=10
wt_stack=lapply(grep(paste0(".*",var,".*_",mese,"_"),files_all,value=T),stack)
clim=readRDS(grep(paste0(".*",var,".*_",mese,".nc"),files_clim,value=T))
grep(paste0(".*",var,".*_",mese,"_"),files_all,value=T)
library(raster)
library(ncdf4)
all_wt=c("/home/alf/Documenti/aa_recent_work/lav_messeri/eobs_data/all_wt/")
stats_eobs_wt=c("/home/alf/Documenti/aa_recent_work/lav_messeri/eobs_data/stats_eobs_monthly/")
files_all=list.files(path=all_wt,pattern ="nc",full.names = T)
files_clim=list.files(path=stats_eobs_wt,pattern ="rds",full.names = T)
vars=c("rr","tg","tx","tn","gpm1")
for ( var in vars) {
for ( mese in 1:12) {
wt_stack=lapply(grep(paste0(".*",var,".*_",mese,"_"),files_all,value=T),stack)
clim=readRDS(grep(paste0(".*",var,".*_",mese,".nc"),files_clim,value=T))
template33=readRDS("/home/alf/Documenti/aa_recent_work/lav_messeri/eobs_data/template_wt9.rds")
template66=readRDS("/home/alf/Documenti/aa_recent_work/lav_messeri/eobs_data/template_wt9.rds")
j=which(!is.na(getValues(clim[[1]])))
clim_temp=as.data.frame(clim[j])
for (i in 1:9) {
stack_temp=as.data.frame(wt_stack[[1]][j])
ncol_stack=ncol(stack_temp)
nrow_stack=as.integer(nrow(stack_temp))
aa33=sapply(1:nrow_stack,FUN=function(x) length(which(stack_temp[x,]>clim_temp[x,3])))
aa66=sapply(1:nrow_stack,FUN=function(x) length(which(stack_temp[x,]>clim_temp[x,5])))
template33[[i]][j]=aa33/ncol_stack
template66[[i]][j]=aa66/ncol_stack
saveRDS(template33,paste("p33_",var,"_",mese,"_wt.rds"))
saveRDS(template66,paste("p66_",var,"_",mese,"_wt.rds"))
}
}
}
149450000*1000*1000
149450000*1000*1000/10000
1500000000/ 1.4945e+10
!(require(rBiometeo)
)
install.packages("rwunderground")
library(weatherData)
getSummarizedWeather("ITOSCANA304", "2014-02-02", end_date="2014-02-20", station_type="id")
aa=getSummarizedWeather("ITOSCANA304", "2017-02-02", end_date="2017-02-20", station_type="id")
aa
hdf <- getWeatherForDate("ITOSCANA304", "2017-02-02",
opt_detailed=TRUE,
station_type="id")
hdf
?etWeatherForDate
?getWeatherForDate
hdf <- getWeatherForDate("ITOSCANA304", "2017-02-02",
opt_detailed=TRUE,
opt_all_columns=T,
station_type="ID")
hdf
hdf <- getWeatherForDate("ISCANDIC3", "2017-02-02",
opt_detailed=TRUE,
opt_all_columns=T,
station_type="ID")
hdf
hdf[,-1]
temp <- getWeatherForDate("ISCANDIC3", "2017-02-02",
opt_detailed=TRUE,
opt_all_columns=T,
station_type="ID")
temp$Time.1=NULL
temp
b="20090601"
as.Date(b,format="%Y%m%d")
format(as.Date(b,format="%Y%m%d"),"%m")
weighted.sum=function(x,w){ sum(x*w,na.rm=T) }
a=c(1:9)
b=c(1:8,NA)
weighted.sum(a,b)
weighted.sum=function(x,w){ sum(x*w) }
weighted.sum(a,b)
rep(1,7)
sum(rep(1,7)<1)
sum(rep(2,7)>1)
sum(rep(2,7)>NA)
install.packages("tufte")
install.packages("tufterhandout")
216/261
library(raster)
library(rgdal)
library(rgeos)
library(mapview)
library(htmlwidgets)
library(sp)
library(doBy)
library(igraph)
library(DiagrammeR)
setwd("/home/alf/Scrivania/lav_vergari_pesa")
ucs_bacino_pesa_amm_2017_geo=readOGR(".", "ucs_bacino_pesa_amm_2017_geo")
names(ucs_bacino_pesa_amm_2017_geo)
ucs_bacino_pesa_amm_2017_geo$l_2016
names(ucs_bacino_pesa_amm_2017_geo)
dir()
setwd("uso_suolo_bacino_pesa/qgis")
dir()
ucs_bac_pesa_2007map=ucs_bacino_pesa_amm_2017_geo[,21]
ucs_bac_pesa_2016map=ucs_bacino_pesa_amm_2017_geo[,20]
ucs_bac_pesa_v07_16=ucs_bacino_pesa_amm_2017_geo[,18]
writeOGR(ucs_bac_pesa_2007map, ".", "ucs_bac_pesa_2007map", driver="ESRI Shapefile",overwrite_layer = T)
writeOGR(ucs_bac_pesa_2016map, ".", "ucs_bac_pesa_2016map", driver="ESRI Shapefile",overwrite_layer = T)
writeOGR(ucs_bac_pesa_v07_16, ".", "ucs_bac_pesa_v07_16", driver="ESRI Shapefile",overwrite_layer = T)
dir()
